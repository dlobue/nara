msg_Container = namedtuple('msg_container', ['sender', 'to', 'cc', 'subject', 'osubject', 'msgid', 'muuid', 'flags', 'labels', 'sent', 'mtime', 'in_reply_to', 'references', 'sample', 'thread'], verbose=True)
class msg_container(tuple):
        'msg_container(sender, to, cc, subject, osubject, msgid, muuid, flags, labels, sent, mtime, in_reply_to, references, sample, thread)'

        __slots__ = ()

        _fields = ('sender', 'to', 'cc', 'subject', 'osubject', 'msgid', 'muuid', 'flags', 'labels', 'sent', 'mtime', 'in_reply_to', 'references', 'sample', 'thread')

        def __new__(_cls, sender, to, cc, subject, osubject, msgid, muuid, flags, labels, sent, mtime, in_reply_to, references, sample, thread):
            return _tuple.__new__(_cls, (sender, to, cc, subject, osubject, msgid, muuid, flags, labels, sent, mtime, in_reply_to, references, sample, thread))

        @classmethod
        def _make(cls, iterable, new=tuple.__new__, len=len):
            'Make a new msg_container object from a sequence or iterable'
            result = new(cls, iterable)
            if len(result) != 15:
                raise TypeError('Expected 15 arguments, got %d' % len(result))
            return result

        def __repr__(self):
            return 'msg_container(sender=%r, to=%r, cc=%r, subject=%r, osubject=%r, msgid=%r, muuid=%r, flags=%r, labels=%r, sent=%r, mtime=%r, in_reply_to=%r, references=%r, sample=%r, thread=%r)' % self

        def _asdict(t):
            'Return a new dict which maps field names to their values'
            return {'sender': t[0], 'to': t[1], 'cc': t[2], 'subject': t[3], 'osubject': t[4], 'msgid': t[5], 'muuid': t[6], 'flags': t[7], 'labels': t[8], 'sent': t[9], 'mtime': t[10], 'in_reply_to': t[11], 'references': t[12], 'sample': t[13], 'thread': t[14]}

        def _replace(_self, **kwds):
            'Return a new msg_container object replacing specified fields with new values'
            result = _self._make(map(kwds.pop, ('sender', 'to', 'cc', 'subject', 'osubject', 'msgid', 'muuid', 'flags', 'labels', 'sent', 'mtime', 'in_reply_to', 'references', 'sample', 'thread'), _self))
            if kwds:
                raise ValueError('Got unexpected field names: %r' % kwds.keys())
            return result

        def __getnewargs__(self):
            return tuple(self)

        sender = _property(_itemgetter(0))
        to = _property(_itemgetter(1))
        cc = _property(_itemgetter(2))
        subject = _property(_itemgetter(3))
        osubject = _property(_itemgetter(4))
        msgid = _property(_itemgetter(5))
        muuid = _property(_itemgetter(6))
        flags = _property(_itemgetter(7))
        labels = _property(_itemgetter(8))
        sent = _property(_itemgetter(9))
        mtime = _property(_itemgetter(10))
        in_reply_to = _property(_itemgetter(11))
        references = _property(_itemgetter(12))
        sample = _property(_itemgetter(13))
        thread = _property(_itemgetter(14))


